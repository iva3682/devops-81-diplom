terraform {
  required_providers {
    yandex = {
      source = "yandex-cloud/yandex"
    }
  }
  required_version = ">= 0.14.8"
}

provider "yandex" {
  token     = var.token
  cloud_id  = var.cloud_id
  folder_id = var.folder_id
  zone      = var.zone
}

module "yc-vpc" {
  source       = "github.com/terraform-yc-modules/terraform-yc-vpc.git"
  network_name = "devops-81-net"
  create_sg    = false

  private_subnets = [{
    name           = "devops-81-subnet"
    zone           = var.zone
    v4_cidr_blocks = ["10.10.0.0/24"]
  }]
}


module "kube" {
  source       = "github.com/terraform-yc-modules/terraform-yc-kubernetes.git"
  network_id   = module.yc-vpc.vpc_id
  cluster_name = "k8s-devops-81"

  master_locations = [
    for s in module.yc-vpc.private_subnets :
    {
      zone      = s.zone,
      subnet_id = s.subnet_id
    }
  ]

  node_groups = {
    "yc-k8s-ng-01" = {
      description = "Kubernetes nodes group 01"
      fixed_scale = {
        size = 1
      }
      node_labels = {
        role        = "worker-01"
        environment = "prod"
      }
    }
  }
}

module "compute_instance" {
  source = "github.com/terraform-yc-modules/terraform-yc-compute-instance.git"

  zone         = var.zone
  image_family = "ubuntu-2204-lts"
  name         = "srv"
  hostname     = "srv"
  memory       = 12
  cores        = 6

  boot_disk = {
    size       = 30
    block_size = 4096
    type       = "network-ssd"
  }

  enable_oslogin_or_ssh_keys = {
    ssh_user = "ansible"
    ssh_key  = "~/.ssh/id_rsa.pub"
  }

  network_interfaces = [
    for s in module.yc-vpc.private_subnets :
    {
      subnet_id = s.subnet_id
      ipv4      = true
      nat       = true
    }
  ]
}

resource "local_file" "tf_ansible_new" {
  content  = <<-DOC
    # Ansible vars_file containing variable values from Terraform.
    # Generated by Terraform mgmt configuration.

    jenkins_password: ${var.jenkins_password}
    docker_password: ${var.docker_password}
    opensearch_password: ${var.opensearch_password}
    grafana_password: ${var.grafana_password}
    yc_token: ${var.token}
    yc_cloud_id: ${var.cloud_id}
    yc_folder_id: ${var.folder_id}
    DOC
  filename = "./vars/tf_ansible.yml"
}

resource "local_file" "inventory" {
  depends_on = [module.compute_instance]

  content  = <<-DOC
    srv ansible_host=${module.compute_instance.external_ip[0]} ansible_user=ansible ip=0.0.0.0 roles=data,master

    # List all the nodes in the os cluster
    [os-cluster]
    srv

    # List all the Master eligible nodes under this group
    [master]
    srv

    [dashboards]
    srv
    DOC
  filename = "./inventory/hosts"
}

resource "local_file" "cluster_ca_certificate" {
  depends_on = [module.kube]

  content  = module.kube.cluster_ca_certificate
  filename = "k8s/ca.pem"
}

resource "null_resource" "send_kubeconfig" {
  depends_on = [local_file.cluster_ca_certificate, local_file.inventory]

  provisioner "remote-exec" {
    inline = [
      "mkdir -p ~/.kube",
      "touch ~/.kube/config",
      "chmod 600 ~/.kube/config"
    ]

    connection {
      type        = "ssh"
      user        = "ansible"
      private_key = file("~/.ssh/id_rsa")
      host        = module.compute_instance.external_ip[0]
    }
  }

  provisioner "local-exec" {
    command = "${module.kube.external_cluster_cmd} --force"
  }

  provisioner "local-exec" {
    command = "kubectl apply -f k8s/sa.yaml"
  }

  provisioner "local-exec" {
    command = "kubectl config set-cluster k8s-devops-81 --certificate-authority=k8s/ca.pem --embed-certs --server=${module.kube.external_v4_endpoint} --kubeconfig=k8s/kubeconfig"
  }

  provisioner "local-exec" {
    command = "kubectl config set-credentials admin-user --token=$(kubectl -n kube-system get secret $(kubectl -n kube-system get secret | grep admin-user-token | awk '{print $1}') -o json | jq -r .data.token | base64 -d) --kubeconfig=k8s/kubeconfig"
  }

  provisioner "local-exec" {
    command = "kubectl config set-context default --cluster=k8s-devops-81 --user=admin-user --kubeconfig=k8s/kubeconfig"
  }

  provisioner "local-exec" {
    command = "kubectl config use-context default --kubeconfig=k8s/kubeconfig"
  }

  connection {
    type        = "ssh"
    user        = "ansible"
    private_key = file("~/.ssh/id_rsa")
    host        = module.compute_instance.external_ip[0]
  }

  provisioner "file" {
    source      = "k8s/kubeconfig"
    destination = "/home/ansible/.kube/config"
  }
}

resource "null_resource" "ansible" {
  depends_on = [null_resource.send_kubeconfig]

  provisioner "remote-exec" {
    inline = [
      "sudo apt-get update"
    ]

    connection {
      type        = "ssh"
      user        = "ansible"
      private_key = file("~/.ssh/id_rsa")
      host        = module.compute_instance.external_ip[0]
    }
  }

  provisioner "local-exec" {
    command = "ansible-galaxy install -r requirements.yml && ansible-playbook srv.ansible.yaml"
  }
}

output "jenkins_host" {
  value       = "${module.compute_instance.external_ip[0]}:8080"
  description = "Jenkins host"
  sensitive   = false
}

output "opensearch_dashboard_host" {
  value       = "${module.compute_instance.external_ip[0]}:5601"
  description = "Opensearch Dashboard host"
  sensitive   = false
}

output "grafana_dashboard_host" {
  value       = "${module.compute_instance.external_ip[0]}:3000"
  description = "Grafana Dashboard host"
  sensitive   = false
}

output "prometheus_dashboard_host" {
  value       = "${module.compute_instance.external_ip[0]}:9090"
  description = "Prometheus Dashboard host"
  sensitive   = false
}